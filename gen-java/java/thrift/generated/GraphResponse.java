/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package java.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-12-30")
public class GraphResponse implements org.apache.thrift.TBase<GraphResponse, GraphResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GraphResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GraphResponse");

  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REL_FIELD_DESC = new org.apache.thrift.protocol.TField("rel", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("node", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GraphResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GraphResponseTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String code; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<RelItem> rel; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<PosItem> node; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String msg; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CODE((short)1, "code"),
    REL((short)2, "rel"),
    NODE((short)3, "node"),
    MSG((short)4, "msg");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CODE
          return CODE;
        case 2: // REL
          return REL;
        case 3: // NODE
          return NODE;
        case 4: // MSG
          return MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.MSG};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REL, new org.apache.thrift.meta_data.FieldMetaData("rel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RelItem.class))));
    tmpMap.put(_Fields.NODE, new org.apache.thrift.meta_data.FieldMetaData("node", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PosItem.class))));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GraphResponse.class, metaDataMap);
  }

  public GraphResponse() {
  }

  public GraphResponse(
    java.lang.String code,
    java.util.List<RelItem> rel,
    java.util.List<PosItem> node)
  {
    this();
    this.code = code;
    this.rel = rel;
    this.node = node;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GraphResponse(GraphResponse other) {
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetRel()) {
      java.util.List<RelItem> __this__rel = new java.util.ArrayList<RelItem>(other.rel.size());
      for (RelItem other_element : other.rel) {
        __this__rel.add(new RelItem(other_element));
      }
      this.rel = __this__rel;
    }
    if (other.isSetNode()) {
      java.util.List<PosItem> __this__node = new java.util.ArrayList<PosItem>(other.node.size());
      for (PosItem other_element : other.node) {
        __this__node.add(new PosItem(other_element));
      }
      this.node = __this__node;
    }
    if (other.isSetMsg()) {
      this.msg = other.msg;
    }
  }

  public GraphResponse deepCopy() {
    return new GraphResponse(this);
  }

  @Override
  public void clear() {
    this.code = null;
    this.rel = null;
    this.node = null;
    this.msg = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCode() {
    return this.code;
  }

  public GraphResponse setCode(@org.apache.thrift.annotation.Nullable java.lang.String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public int getRelSize() {
    return (this.rel == null) ? 0 : this.rel.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<RelItem> getRelIterator() {
    return (this.rel == null) ? null : this.rel.iterator();
  }

  public void addToRel(RelItem elem) {
    if (this.rel == null) {
      this.rel = new java.util.ArrayList<RelItem>();
    }
    this.rel.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<RelItem> getRel() {
    return this.rel;
  }

  public GraphResponse setRel(@org.apache.thrift.annotation.Nullable java.util.List<RelItem> rel) {
    this.rel = rel;
    return this;
  }

  public void unsetRel() {
    this.rel = null;
  }

  /** Returns true if field rel is set (has been assigned a value) and false otherwise */
  public boolean isSetRel() {
    return this.rel != null;
  }

  public void setRelIsSet(boolean value) {
    if (!value) {
      this.rel = null;
    }
  }

  public int getNodeSize() {
    return (this.node == null) ? 0 : this.node.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<PosItem> getNodeIterator() {
    return (this.node == null) ? null : this.node.iterator();
  }

  public void addToNode(PosItem elem) {
    if (this.node == null) {
      this.node = new java.util.ArrayList<PosItem>();
    }
    this.node.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<PosItem> getNode() {
    return this.node;
  }

  public GraphResponse setNode(@org.apache.thrift.annotation.Nullable java.util.List<PosItem> node) {
    this.node = node;
    return this;
  }

  public void unsetNode() {
    this.node = null;
  }

  /** Returns true if field node is set (has been assigned a value) and false otherwise */
  public boolean isSetNode() {
    return this.node != null;
  }

  public void setNodeIsSet(boolean value) {
    if (!value) {
      this.node = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMsg() {
    return this.msg;
  }

  public GraphResponse setMsg(@org.apache.thrift.annotation.Nullable java.lang.String msg) {
    this.msg = msg;
    return this;
  }

  public void unsetMsg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg() {
    return this.msg != null;
  }

  public void setMsgIsSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((java.lang.String)value);
      }
      break;

    case REL:
      if (value == null) {
        unsetRel();
      } else {
        setRel((java.util.List<RelItem>)value);
      }
      break;

    case NODE:
      if (value == null) {
        unsetNode();
      } else {
        setNode((java.util.List<PosItem>)value);
      }
      break;

    case MSG:
      if (value == null) {
        unsetMsg();
      } else {
        setMsg((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CODE:
      return getCode();

    case REL:
      return getRel();

    case NODE:
      return getNode();

    case MSG:
      return getMsg();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CODE:
      return isSetCode();
    case REL:
      return isSetRel();
    case NODE:
      return isSetNode();
    case MSG:
      return isSetMsg();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof GraphResponse)
      return this.equals((GraphResponse)that);
    return false;
  }

  public boolean equals(GraphResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_rel = true && this.isSetRel();
    boolean that_present_rel = true && that.isSetRel();
    if (this_present_rel || that_present_rel) {
      if (!(this_present_rel && that_present_rel))
        return false;
      if (!this.rel.equals(that.rel))
        return false;
    }

    boolean this_present_node = true && this.isSetNode();
    boolean that_present_node = true && that.isSetNode();
    if (this_present_node || that_present_node) {
      if (!(this_present_node && that_present_node))
        return false;
      if (!this.node.equals(that.node))
        return false;
    }

    boolean this_present_msg = true && this.isSetMsg();
    boolean that_present_msg = true && that.isSetMsg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCode()) ? 131071 : 524287);
    if (isSetCode())
      hashCode = hashCode * 8191 + code.hashCode();

    hashCode = hashCode * 8191 + ((isSetRel()) ? 131071 : 524287);
    if (isSetRel())
      hashCode = hashCode * 8191 + rel.hashCode();

    hashCode = hashCode * 8191 + ((isSetNode()) ? 131071 : 524287);
    if (isSetNode())
      hashCode = hashCode * 8191 + node.hashCode();

    hashCode = hashCode * 8191 + ((isSetMsg()) ? 131071 : 524287);
    if (isSetMsg())
      hashCode = hashCode * 8191 + msg.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(GraphResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCode(), other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRel(), other.isSetRel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rel, other.rel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNode(), other.isSetNode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node, other.node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMsg(), other.isSetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GraphResponse(");
    boolean first = true;

    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rel:");
    if (this.rel == null) {
      sb.append("null");
    } else {
      sb.append(this.rel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("node:");
    if (this.node == null) {
      sb.append("null");
    } else {
      sb.append(this.node);
    }
    first = false;
    if (isSetMsg()) {
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GraphResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GraphResponseStandardScheme getScheme() {
      return new GraphResponseStandardScheme();
    }
  }

  private static class GraphResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<GraphResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GraphResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.rel = new java.util.ArrayList<RelItem>(_list24.size);
                @org.apache.thrift.annotation.Nullable RelItem _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new RelItem();
                  _elem25.read(iprot);
                  struct.rel.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setRelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.node = new java.util.ArrayList<PosItem>(_list27.size);
                @org.apache.thrift.annotation.Nullable PosItem _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = new PosItem();
                  _elem28.read(iprot);
                  struct.node.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setNodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.setMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GraphResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      if (struct.rel != null) {
        oprot.writeFieldBegin(REL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.rel.size()));
          for (RelItem _iter30 : struct.rel)
          {
            _iter30.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.node != null) {
        oprot.writeFieldBegin(NODE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.node.size()));
          for (PosItem _iter31 : struct.node)
          {
            _iter31.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.msg != null) {
        if (struct.isSetMsg()) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GraphResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GraphResponseTupleScheme getScheme() {
      return new GraphResponseTupleScheme();
    }
  }

  private static class GraphResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<GraphResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GraphResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCode()) {
        optionals.set(0);
      }
      if (struct.isSetRel()) {
        optionals.set(1);
      }
      if (struct.isSetNode()) {
        optionals.set(2);
      }
      if (struct.isSetMsg()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetRel()) {
        {
          oprot.writeI32(struct.rel.size());
          for (RelItem _iter32 : struct.rel)
          {
            _iter32.write(oprot);
          }
        }
      }
      if (struct.isSetNode()) {
        {
          oprot.writeI32(struct.node.size());
          for (PosItem _iter33 : struct.node)
          {
            _iter33.write(oprot);
          }
        }
      }
      if (struct.isSetMsg()) {
        oprot.writeString(struct.msg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GraphResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list34 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.rel = new java.util.ArrayList<RelItem>(_list34.size);
          @org.apache.thrift.annotation.Nullable RelItem _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = new RelItem();
            _elem35.read(iprot);
            struct.rel.add(_elem35);
          }
        }
        struct.setRelIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list37 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.node = new java.util.ArrayList<PosItem>(_list37.size);
          @org.apache.thrift.annotation.Nullable PosItem _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new PosItem();
            _elem38.read(iprot);
            struct.node.add(_elem38);
          }
        }
        struct.setNodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.msg = iprot.readString();
        struct.setMsgIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

