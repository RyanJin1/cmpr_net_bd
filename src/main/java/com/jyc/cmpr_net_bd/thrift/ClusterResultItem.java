/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jyc.cmpr_net_bd.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-02-02")
public class ClusterResultItem implements org.apache.thrift.TBase<ClusterResultItem, ClusterResultItem._Fields>, java.io.Serializable, Cloneable, Comparable<ClusterResultItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClusterResultItem");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLUSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("pageRank", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField BETWEENNESS_FIELD_DESC = new org.apache.thrift.protocol.TField("betweenness", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ClusterResultItemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ClusterResultItemTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String id; // required
  public int cluster; // required
  public double pageRank; // required
  public double betweenness; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CLUSTER((short)2, "cluster"),
    PAGE_RANK((short)3, "pageRank"),
    BETWEENNESS((short)4, "betweenness");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CLUSTER
          return CLUSTER;
        case 3: // PAGE_RANK
          return PAGE_RANK;
        case 4: // BETWEENNESS
          return BETWEENNESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLUSTER_ISSET_ID = 0;
  private static final int __PAGERANK_ISSET_ID = 1;
  private static final int __BETWEENNESS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLUSTER, new org.apache.thrift.meta_data.FieldMetaData("cluster", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_RANK, new org.apache.thrift.meta_data.FieldMetaData("pageRank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BETWEENNESS, new org.apache.thrift.meta_data.FieldMetaData("betweenness", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClusterResultItem.class, metaDataMap);
  }

  public ClusterResultItem() {
  }

  public ClusterResultItem(
    String id,
    int cluster,
    double pageRank,
    double betweenness)
  {
    this();
    this.id = id;
    this.cluster = cluster;
    setClusterIsSet(true);
    this.pageRank = pageRank;
    setPageRankIsSet(true);
    this.betweenness = betweenness;
    setBetweennessIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClusterResultItem(ClusterResultItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.cluster = other.cluster;
    this.pageRank = other.pageRank;
    this.betweenness = other.betweenness;
  }

  public ClusterResultItem deepCopy() {
    return new ClusterResultItem(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setClusterIsSet(false);
    this.cluster = 0;
    setPageRankIsSet(false);
    this.pageRank = 0.0;
    setBetweennessIsSet(false);
    this.betweenness = 0.0;
  }

  @org.apache.thrift.annotation.Nullable
  public String getId() {
    return this.id;
  }

  public ClusterResultItem setId(@org.apache.thrift.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int getCluster() {
    return this.cluster;
  }

  public ClusterResultItem setCluster(int cluster) {
    this.cluster = cluster;
    setClusterIsSet(true);
    return this;
  }

  public void unsetCluster() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLUSTER_ISSET_ID);
  }

  /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLUSTER_ISSET_ID);
  }

  public void setClusterIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLUSTER_ISSET_ID, value);
  }

  public double getPageRank() {
    return this.pageRank;
  }

  public ClusterResultItem setPageRank(double pageRank) {
    this.pageRank = pageRank;
    setPageRankIsSet(true);
    return this;
  }

  public void unsetPageRank() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGERANK_ISSET_ID);
  }

  /** Returns true if field pageRank is set (has been assigned a value) and false otherwise */
  public boolean isSetPageRank() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGERANK_ISSET_ID);
  }

  public void setPageRankIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGERANK_ISSET_ID, value);
  }

  public double getBetweenness() {
    return this.betweenness;
  }

  public ClusterResultItem setBetweenness(double betweenness) {
    this.betweenness = betweenness;
    setBetweennessIsSet(true);
    return this;
  }

  public void unsetBetweenness() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BETWEENNESS_ISSET_ID);
  }

  /** Returns true if field betweenness is set (has been assigned a value) and false otherwise */
  public boolean isSetBetweenness() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BETWEENNESS_ISSET_ID);
  }

  public void setBetweennessIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BETWEENNESS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case CLUSTER:
      if (value == null) {
        unsetCluster();
      } else {
        setCluster((Integer)value);
      }
      break;

    case PAGE_RANK:
      if (value == null) {
        unsetPageRank();
      } else {
        setPageRank((Double)value);
      }
      break;

    case BETWEENNESS:
      if (value == null) {
        unsetBetweenness();
      } else {
        setBetweenness((Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CLUSTER:
      return getCluster();

    case PAGE_RANK:
      return getPageRank();

    case BETWEENNESS:
      return getBetweenness();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CLUSTER:
      return isSetCluster();
    case PAGE_RANK:
      return isSetPageRank();
    case BETWEENNESS:
      return isSetBetweenness();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof ClusterResultItem)
      return this.equals((ClusterResultItem)that);
    return false;
  }

  public boolean equals(ClusterResultItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_cluster = true;
    boolean that_present_cluster = true;
    if (this_present_cluster || that_present_cluster) {
      if (!(this_present_cluster && that_present_cluster))
        return false;
      if (this.cluster != that.cluster)
        return false;
    }

    boolean this_present_pageRank = true;
    boolean that_present_pageRank = true;
    if (this_present_pageRank || that_present_pageRank) {
      if (!(this_present_pageRank && that_present_pageRank))
        return false;
      if (this.pageRank != that.pageRank)
        return false;
    }

    boolean this_present_betweenness = true;
    boolean that_present_betweenness = true;
    if (this_present_betweenness || that_present_betweenness) {
      if (!(this_present_betweenness && that_present_betweenness))
        return false;
      if (this.betweenness != that.betweenness)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + cluster;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(pageRank);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(betweenness);

    return hashCode;
  }

  @Override
  public int compareTo(ClusterResultItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetCluster(), other.isSetCluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster, other.cluster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetPageRank(), other.isSetPageRank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageRank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageRank, other.pageRank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetBetweenness(), other.isSetBetweenness());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBetweenness()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.betweenness, other.betweenness);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClusterResultItem(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cluster:");
    sb.append(this.cluster);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageRank:");
    sb.append(this.pageRank);
    first = false;
    if (!first) sb.append(", ");
    sb.append("betweenness:");
    sb.append(this.betweenness);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClusterResultItemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ClusterResultItemStandardScheme getScheme() {
      return new ClusterResultItemStandardScheme();
    }
  }

  private static class ClusterResultItemStandardScheme extends org.apache.thrift.scheme.StandardScheme<ClusterResultItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClusterResultItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLUSTER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cluster = iprot.readI32();
              struct.setClusterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE_RANK
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pageRank = iprot.readDouble();
              struct.setPageRankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BETWEENNESS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.betweenness = iprot.readDouble();
              struct.setBetweennessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClusterResultItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
      oprot.writeI32(struct.cluster);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_RANK_FIELD_DESC);
      oprot.writeDouble(struct.pageRank);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BETWEENNESS_FIELD_DESC);
      oprot.writeDouble(struct.betweenness);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClusterResultItemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ClusterResultItemTupleScheme getScheme() {
      return new ClusterResultItemTupleScheme();
    }
  }

  private static class ClusterResultItemTupleScheme extends org.apache.thrift.scheme.TupleScheme<ClusterResultItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClusterResultItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCluster()) {
        optionals.set(1);
      }
      if (struct.isSetPageRank()) {
        optionals.set(2);
      }
      if (struct.isSetBetweenness()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetCluster()) {
        oprot.writeI32(struct.cluster);
      }
      if (struct.isSetPageRank()) {
        oprot.writeDouble(struct.pageRank);
      }
      if (struct.isSetBetweenness()) {
        oprot.writeDouble(struct.betweenness);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClusterResultItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cluster = iprot.readI32();
        struct.setClusterIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pageRank = iprot.readDouble();
        struct.setPageRankIsSet(true);
      }
      if (incoming.get(3)) {
        struct.betweenness = iprot.readDouble();
        struct.setBetweennessIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

