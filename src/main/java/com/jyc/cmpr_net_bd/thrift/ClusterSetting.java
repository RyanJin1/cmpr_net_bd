/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jyc.cmpr_net_bd.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-01-28")
public class ClusterSetting implements org.apache.thrift.TBase<ClusterSetting, ClusterSetting._Fields>, java.io.Serializable, Cloneable, Comparable<ClusterSetting> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClusterSetting");

  private static final org.apache.thrift.protocol.TField RESOLUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("resolution", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField BETA_FIELD_DESC = new org.apache.thrift.protocol.TField("beta", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField OBJ_FUNC_FIELD_DESC = new org.apache.thrift.protocol.TField("obj_func", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ClusterSettingStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ClusterSettingTupleSchemeFactory();

  public double resolution; // required
  public double beta; // required
  public @org.apache.thrift.annotation.Nullable String obj_func; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESOLUTION((short)1, "resolution"),
    BETA((short)2, "beta"),
    OBJ_FUNC((short)3, "obj_func");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESOLUTION
          return RESOLUTION;
        case 2: // BETA
          return BETA;
        case 3: // OBJ_FUNC
          return OBJ_FUNC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESOLUTION_ISSET_ID = 0;
  private static final int __BETA_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESOLUTION, new org.apache.thrift.meta_data.FieldMetaData("resolution", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BETA, new org.apache.thrift.meta_data.FieldMetaData("beta", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OBJ_FUNC, new org.apache.thrift.meta_data.FieldMetaData("obj_func", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClusterSetting.class, metaDataMap);
  }

  public ClusterSetting() {
  }

  public ClusterSetting(
    double resolution,
    double beta,
    String obj_func)
  {
    this();
    this.resolution = resolution;
    setResolutionIsSet(true);
    this.beta = beta;
    setBetaIsSet(true);
    this.obj_func = obj_func;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClusterSetting(ClusterSetting other) {
    __isset_bitfield = other.__isset_bitfield;
    this.resolution = other.resolution;
    this.beta = other.beta;
    if (other.isSetObj_func()) {
      this.obj_func = other.obj_func;
    }
  }

  public ClusterSetting deepCopy() {
    return new ClusterSetting(this);
  }

  @Override
  public void clear() {
    setResolutionIsSet(false);
    this.resolution = 0.0;
    setBetaIsSet(false);
    this.beta = 0.0;
    this.obj_func = null;
  }

  public double getResolution() {
    return this.resolution;
  }

  public ClusterSetting setResolution(double resolution) {
    this.resolution = resolution;
    setResolutionIsSet(true);
    return this;
  }

  public void unsetResolution() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESOLUTION_ISSET_ID);
  }

  /** Returns true if field resolution is set (has been assigned a value) and false otherwise */
  public boolean isSetResolution() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESOLUTION_ISSET_ID);
  }

  public void setResolutionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESOLUTION_ISSET_ID, value);
  }

  public double getBeta() {
    return this.beta;
  }

  public ClusterSetting setBeta(double beta) {
    this.beta = beta;
    setBetaIsSet(true);
    return this;
  }

  public void unsetBeta() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BETA_ISSET_ID);
  }

  /** Returns true if field beta is set (has been assigned a value) and false otherwise */
  public boolean isSetBeta() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BETA_ISSET_ID);
  }

  public void setBetaIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BETA_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getObj_func() {
    return this.obj_func;
  }

  public ClusterSetting setObj_func(@org.apache.thrift.annotation.Nullable String obj_func) {
    this.obj_func = obj_func;
    return this;
  }

  public void unsetObj_func() {
    this.obj_func = null;
  }

  /** Returns true if field obj_func is set (has been assigned a value) and false otherwise */
  public boolean isSetObj_func() {
    return this.obj_func != null;
  }

  public void setObj_funcIsSet(boolean value) {
    if (!value) {
      this.obj_func = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case RESOLUTION:
      if (value == null) {
        unsetResolution();
      } else {
        setResolution((Double)value);
      }
      break;

    case BETA:
      if (value == null) {
        unsetBeta();
      } else {
        setBeta((Double)value);
      }
      break;

    case OBJ_FUNC:
      if (value == null) {
        unsetObj_func();
      } else {
        setObj_func((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESOLUTION:
      return getResolution();

    case BETA:
      return getBeta();

    case OBJ_FUNC:
      return getObj_func();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESOLUTION:
      return isSetResolution();
    case BETA:
      return isSetBeta();
    case OBJ_FUNC:
      return isSetObj_func();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof ClusterSetting)
      return this.equals((ClusterSetting)that);
    return false;
  }

  public boolean equals(ClusterSetting that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_resolution = true;
    boolean that_present_resolution = true;
    if (this_present_resolution || that_present_resolution) {
      if (!(this_present_resolution && that_present_resolution))
        return false;
      if (this.resolution != that.resolution)
        return false;
    }

    boolean this_present_beta = true;
    boolean that_present_beta = true;
    if (this_present_beta || that_present_beta) {
      if (!(this_present_beta && that_present_beta))
        return false;
      if (this.beta != that.beta)
        return false;
    }

    boolean this_present_obj_func = true && this.isSetObj_func();
    boolean that_present_obj_func = true && that.isSetObj_func();
    if (this_present_obj_func || that_present_obj_func) {
      if (!(this_present_obj_func && that_present_obj_func))
        return false;
      if (!this.obj_func.equals(that.obj_func))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(resolution);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(beta);

    hashCode = hashCode * 8191 + ((isSetObj_func()) ? 131071 : 524287);
    if (isSetObj_func())
      hashCode = hashCode * 8191 + obj_func.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ClusterSetting other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetResolution(), other.isSetResolution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResolution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resolution, other.resolution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetBeta(), other.isSetBeta());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeta()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beta, other.beta);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetObj_func(), other.isSetObj_func());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObj_func()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obj_func, other.obj_func);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ClusterSetting(");
    boolean first = true;

    sb.append("resolution:");
    sb.append(this.resolution);
    first = false;
    if (!first) sb.append(", ");
    sb.append("beta:");
    sb.append(this.beta);
    first = false;
    if (!first) sb.append(", ");
    sb.append("obj_func:");
    if (this.obj_func == null) {
      sb.append("null");
    } else {
      sb.append(this.obj_func);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClusterSettingStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ClusterSettingStandardScheme getScheme() {
      return new ClusterSettingStandardScheme();
    }
  }

  private static class ClusterSettingStandardScheme extends org.apache.thrift.scheme.StandardScheme<ClusterSetting> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClusterSetting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESOLUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.resolution = iprot.readDouble();
              struct.setResolutionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BETA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.beta = iprot.readDouble();
              struct.setBetaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OBJ_FUNC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.obj_func = iprot.readString();
              struct.setObj_funcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClusterSetting struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RESOLUTION_FIELD_DESC);
      oprot.writeDouble(struct.resolution);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BETA_FIELD_DESC);
      oprot.writeDouble(struct.beta);
      oprot.writeFieldEnd();
      if (struct.obj_func != null) {
        oprot.writeFieldBegin(OBJ_FUNC_FIELD_DESC);
        oprot.writeString(struct.obj_func);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClusterSettingTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ClusterSettingTupleScheme getScheme() {
      return new ClusterSettingTupleScheme();
    }
  }

  private static class ClusterSettingTupleScheme extends org.apache.thrift.scheme.TupleScheme<ClusterSetting> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClusterSetting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetResolution()) {
        optionals.set(0);
      }
      if (struct.isSetBeta()) {
        optionals.set(1);
      }
      if (struct.isSetObj_func()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetResolution()) {
        oprot.writeDouble(struct.resolution);
      }
      if (struct.isSetBeta()) {
        oprot.writeDouble(struct.beta);
      }
      if (struct.isSetObj_func()) {
        oprot.writeString(struct.obj_func);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClusterSetting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.resolution = iprot.readDouble();
        struct.setResolutionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.beta = iprot.readDouble();
        struct.setBetaIsSet(true);
      }
      if (incoming.get(2)) {
        struct.obj_func = iprot.readString();
        struct.setObj_funcIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

