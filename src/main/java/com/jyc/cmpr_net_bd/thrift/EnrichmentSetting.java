/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jyc.cmpr_net_bd.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-02-18")
public class EnrichmentSetting implements org.apache.thrift.TBase<EnrichmentSetting, EnrichmentSetting._Fields>, java.io.Serializable, Cloneable, Comparable<EnrichmentSetting> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EnrichmentSetting");

  private static final org.apache.thrift.protocol.TField GENE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("gene_set", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CUTOFF_FIELD_DESC = new org.apache.thrift.protocol.TField("cutoff", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EnrichmentSettingStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EnrichmentSettingTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String gene_set; // required
  public double cutoff; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GENE_SET((short)1, "gene_set"),
    CUTOFF((short)2, "cutoff");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GENE_SET
          return GENE_SET;
        case 2: // CUTOFF
          return CUTOFF;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CUTOFF_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GENE_SET, new org.apache.thrift.meta_data.FieldMetaData("gene_set", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUTOFF, new org.apache.thrift.meta_data.FieldMetaData("cutoff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EnrichmentSetting.class, metaDataMap);
  }

  public EnrichmentSetting() {
  }

  public EnrichmentSetting(
    String gene_set,
    double cutoff)
  {
    this();
    this.gene_set = gene_set;
    this.cutoff = cutoff;
    setCutoffIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EnrichmentSetting(EnrichmentSetting other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGene_set()) {
      this.gene_set = other.gene_set;
    }
    this.cutoff = other.cutoff;
  }

  public EnrichmentSetting deepCopy() {
    return new EnrichmentSetting(this);
  }

  @Override
  public void clear() {
    this.gene_set = null;
    setCutoffIsSet(false);
    this.cutoff = 0.0;
  }

  @org.apache.thrift.annotation.Nullable
  public String getGene_set() {
    return this.gene_set;
  }

  public EnrichmentSetting setGene_set(@org.apache.thrift.annotation.Nullable String gene_set) {
    this.gene_set = gene_set;
    return this;
  }

  public void unsetGene_set() {
    this.gene_set = null;
  }

  /** Returns true if field gene_set is set (has been assigned a value) and false otherwise */
  public boolean isSetGene_set() {
    return this.gene_set != null;
  }

  public void setGene_setIsSet(boolean value) {
    if (!value) {
      this.gene_set = null;
    }
  }

  public double getCutoff() {
    return this.cutoff;
  }

  public EnrichmentSetting setCutoff(double cutoff) {
    this.cutoff = cutoff;
    setCutoffIsSet(true);
    return this;
  }

  public void unsetCutoff() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CUTOFF_ISSET_ID);
  }

  /** Returns true if field cutoff is set (has been assigned a value) and false otherwise */
  public boolean isSetCutoff() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CUTOFF_ISSET_ID);
  }

  public void setCutoffIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CUTOFF_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case GENE_SET:
      if (value == null) {
        unsetGene_set();
      } else {
        setGene_set((String)value);
      }
      break;

    case CUTOFF:
      if (value == null) {
        unsetCutoff();
      } else {
        setCutoff((Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GENE_SET:
      return getGene_set();

    case CUTOFF:
      return getCutoff();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GENE_SET:
      return isSetGene_set();
    case CUTOFF:
      return isSetCutoff();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof EnrichmentSetting)
      return this.equals((EnrichmentSetting)that);
    return false;
  }

  public boolean equals(EnrichmentSetting that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_gene_set = true && this.isSetGene_set();
    boolean that_present_gene_set = true && that.isSetGene_set();
    if (this_present_gene_set || that_present_gene_set) {
      if (!(this_present_gene_set && that_present_gene_set))
        return false;
      if (!this.gene_set.equals(that.gene_set))
        return false;
    }

    boolean this_present_cutoff = true;
    boolean that_present_cutoff = true;
    if (this_present_cutoff || that_present_cutoff) {
      if (!(this_present_cutoff && that_present_cutoff))
        return false;
      if (this.cutoff != that.cutoff)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetGene_set()) ? 131071 : 524287);
    if (isSetGene_set())
      hashCode = hashCode * 8191 + gene_set.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cutoff);

    return hashCode;
  }

  @Override
  public int compareTo(EnrichmentSetting other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetGene_set(), other.isSetGene_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGene_set()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gene_set, other.gene_set);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetCutoff(), other.isSetCutoff());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCutoff()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cutoff, other.cutoff);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EnrichmentSetting(");
    boolean first = true;

    sb.append("gene_set:");
    if (this.gene_set == null) {
      sb.append("null");
    } else {
      sb.append(this.gene_set);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cutoff:");
    sb.append(this.cutoff);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EnrichmentSettingStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EnrichmentSettingStandardScheme getScheme() {
      return new EnrichmentSettingStandardScheme();
    }
  }

  private static class EnrichmentSettingStandardScheme extends org.apache.thrift.scheme.StandardScheme<EnrichmentSetting> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EnrichmentSetting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GENE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gene_set = iprot.readString();
              struct.setGene_setIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUTOFF
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cutoff = iprot.readDouble();
              struct.setCutoffIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EnrichmentSetting struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.gene_set != null) {
        oprot.writeFieldBegin(GENE_SET_FIELD_DESC);
        oprot.writeString(struct.gene_set);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUTOFF_FIELD_DESC);
      oprot.writeDouble(struct.cutoff);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EnrichmentSettingTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EnrichmentSettingTupleScheme getScheme() {
      return new EnrichmentSettingTupleScheme();
    }
  }

  private static class EnrichmentSettingTupleScheme extends org.apache.thrift.scheme.TupleScheme<EnrichmentSetting> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EnrichmentSetting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGene_set()) {
        optionals.set(0);
      }
      if (struct.isSetCutoff()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetGene_set()) {
        oprot.writeString(struct.gene_set);
      }
      if (struct.isSetCutoff()) {
        oprot.writeDouble(struct.cutoff);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EnrichmentSetting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.gene_set = iprot.readString();
        struct.setGene_setIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cutoff = iprot.readDouble();
        struct.setCutoffIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

