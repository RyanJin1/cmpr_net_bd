/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jyc.cmpr_net_bd.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-02-02")
public class EnrichmentReusltItem implements org.apache.thrift.TBase<EnrichmentReusltItem, EnrichmentReusltItem._Fields>, java.io.Serializable, Cloneable, Comparable<EnrichmentReusltItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EnrichmentReusltItem");

  private static final org.apache.thrift.protocol.TField GENE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("gene_set", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("term", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OVERLAP_FIELD_DESC = new org.apache.thrift.protocol.TField("overlap", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField ADJUSTED_P_FIELD_DESC = new org.apache.thrift.protocol.TField("adjusted_p", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField OLD_P_FIELD_DESC = new org.apache.thrift.protocol.TField("old_p", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField OLD_ADJUSTED_P_FIELD_DESC = new org.apache.thrift.protocol.TField("old_adjusted_p", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField ODDS_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("odds_ratio", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField COMBINED_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("combined_score", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField GENES_FIELD_DESC = new org.apache.thrift.protocol.TField("genes", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EnrichmentReusltItemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EnrichmentReusltItemTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String gene_set; // required
  public @org.apache.thrift.annotation.Nullable String term; // required
  public @org.apache.thrift.annotation.Nullable String overlap; // required
  public double p; // required
  public double adjusted_p; // required
  public double old_p; // required
  public double old_adjusted_p; // required
  public double odds_ratio; // required
  public double combined_score; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<String> genes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GENE_SET((short)1, "gene_set"),
    TERM((short)2, "term"),
    OVERLAP((short)3, "overlap"),
    P((short)4, "p"),
    ADJUSTED_P((short)5, "adjusted_p"),
    OLD_P((short)6, "old_p"),
    OLD_ADJUSTED_P((short)7, "old_adjusted_p"),
    ODDS_RATIO((short)8, "odds_ratio"),
    COMBINED_SCORE((short)9, "combined_score"),
    GENES((short)10, "genes");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GENE_SET
          return GENE_SET;
        case 2: // TERM
          return TERM;
        case 3: // OVERLAP
          return OVERLAP;
        case 4: // P
          return P;
        case 5: // ADJUSTED_P
          return ADJUSTED_P;
        case 6: // OLD_P
          return OLD_P;
        case 7: // OLD_ADJUSTED_P
          return OLD_ADJUSTED_P;
        case 8: // ODDS_RATIO
          return ODDS_RATIO;
        case 9: // COMBINED_SCORE
          return COMBINED_SCORE;
        case 10: // GENES
          return GENES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __P_ISSET_ID = 0;
  private static final int __ADJUSTED_P_ISSET_ID = 1;
  private static final int __OLD_P_ISSET_ID = 2;
  private static final int __OLD_ADJUSTED_P_ISSET_ID = 3;
  private static final int __ODDS_RATIO_ISSET_ID = 4;
  private static final int __COMBINED_SCORE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GENE_SET, new org.apache.thrift.meta_data.FieldMetaData("gene_set", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TERM, new org.apache.thrift.meta_data.FieldMetaData("term", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OVERLAP, new org.apache.thrift.meta_data.FieldMetaData("overlap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ADJUSTED_P, new org.apache.thrift.meta_data.FieldMetaData("adjusted_p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OLD_P, new org.apache.thrift.meta_data.FieldMetaData("old_p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OLD_ADJUSTED_P, new org.apache.thrift.meta_data.FieldMetaData("old_adjusted_p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ODDS_RATIO, new org.apache.thrift.meta_data.FieldMetaData("odds_ratio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMBINED_SCORE, new org.apache.thrift.meta_data.FieldMetaData("combined_score", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GENES, new org.apache.thrift.meta_data.FieldMetaData("genes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EnrichmentReusltItem.class, metaDataMap);
  }

  public EnrichmentReusltItem() {
  }

  public EnrichmentReusltItem(
    String gene_set,
    String term,
    String overlap,
    double p,
    double adjusted_p,
    double old_p,
    double old_adjusted_p,
    double odds_ratio,
    double combined_score,
    java.util.List<String> genes)
  {
    this();
    this.gene_set = gene_set;
    this.term = term;
    this.overlap = overlap;
    this.p = p;
    setPIsSet(true);
    this.adjusted_p = adjusted_p;
    setAdjusted_pIsSet(true);
    this.old_p = old_p;
    setOld_pIsSet(true);
    this.old_adjusted_p = old_adjusted_p;
    setOld_adjusted_pIsSet(true);
    this.odds_ratio = odds_ratio;
    setOdds_ratioIsSet(true);
    this.combined_score = combined_score;
    setCombined_scoreIsSet(true);
    this.genes = genes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EnrichmentReusltItem(EnrichmentReusltItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGene_set()) {
      this.gene_set = other.gene_set;
    }
    if (other.isSetTerm()) {
      this.term = other.term;
    }
    if (other.isSetOverlap()) {
      this.overlap = other.overlap;
    }
    this.p = other.p;
    this.adjusted_p = other.adjusted_p;
    this.old_p = other.old_p;
    this.old_adjusted_p = other.old_adjusted_p;
    this.odds_ratio = other.odds_ratio;
    this.combined_score = other.combined_score;
    if (other.isSetGenes()) {
      java.util.List<String> __this__genes = new java.util.ArrayList<String>(other.genes);
      this.genes = __this__genes;
    }
  }

  public EnrichmentReusltItem deepCopy() {
    return new EnrichmentReusltItem(this);
  }

  @Override
  public void clear() {
    this.gene_set = null;
    this.term = null;
    this.overlap = null;
    setPIsSet(false);
    this.p = 0.0;
    setAdjusted_pIsSet(false);
    this.adjusted_p = 0.0;
    setOld_pIsSet(false);
    this.old_p = 0.0;
    setOld_adjusted_pIsSet(false);
    this.old_adjusted_p = 0.0;
    setOdds_ratioIsSet(false);
    this.odds_ratio = 0.0;
    setCombined_scoreIsSet(false);
    this.combined_score = 0.0;
    this.genes = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getGene_set() {
    return this.gene_set;
  }

  public EnrichmentReusltItem setGene_set(@org.apache.thrift.annotation.Nullable String gene_set) {
    this.gene_set = gene_set;
    return this;
  }

  public void unsetGene_set() {
    this.gene_set = null;
  }

  /** Returns true if field gene_set is set (has been assigned a value) and false otherwise */
  public boolean isSetGene_set() {
    return this.gene_set != null;
  }

  public void setGene_setIsSet(boolean value) {
    if (!value) {
      this.gene_set = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getTerm() {
    return this.term;
  }

  public EnrichmentReusltItem setTerm(@org.apache.thrift.annotation.Nullable String term) {
    this.term = term;
    return this;
  }

  public void unsetTerm() {
    this.term = null;
  }

  /** Returns true if field term is set (has been assigned a value) and false otherwise */
  public boolean isSetTerm() {
    return this.term != null;
  }

  public void setTermIsSet(boolean value) {
    if (!value) {
      this.term = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getOverlap() {
    return this.overlap;
  }

  public EnrichmentReusltItem setOverlap(@org.apache.thrift.annotation.Nullable String overlap) {
    this.overlap = overlap;
    return this;
  }

  public void unsetOverlap() {
    this.overlap = null;
  }

  /** Returns true if field overlap is set (has been assigned a value) and false otherwise */
  public boolean isSetOverlap() {
    return this.overlap != null;
  }

  public void setOverlapIsSet(boolean value) {
    if (!value) {
      this.overlap = null;
    }
  }

  public double getP() {
    return this.p;
  }

  public EnrichmentReusltItem setP(double p) {
    this.p = p;
    setPIsSet(true);
    return this;
  }

  public void unsetP() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __P_ISSET_ID);
  }

  /** Returns true if field p is set (has been assigned a value) and false otherwise */
  public boolean isSetP() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __P_ISSET_ID);
  }

  public void setPIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __P_ISSET_ID, value);
  }

  public double getAdjusted_p() {
    return this.adjusted_p;
  }

  public EnrichmentReusltItem setAdjusted_p(double adjusted_p) {
    this.adjusted_p = adjusted_p;
    setAdjusted_pIsSet(true);
    return this;
  }

  public void unsetAdjusted_p() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ADJUSTED_P_ISSET_ID);
  }

  /** Returns true if field adjusted_p is set (has been assigned a value) and false otherwise */
  public boolean isSetAdjusted_p() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ADJUSTED_P_ISSET_ID);
  }

  public void setAdjusted_pIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ADJUSTED_P_ISSET_ID, value);
  }

  public double getOld_p() {
    return this.old_p;
  }

  public EnrichmentReusltItem setOld_p(double old_p) {
    this.old_p = old_p;
    setOld_pIsSet(true);
    return this;
  }

  public void unsetOld_p() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OLD_P_ISSET_ID);
  }

  /** Returns true if field old_p is set (has been assigned a value) and false otherwise */
  public boolean isSetOld_p() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OLD_P_ISSET_ID);
  }

  public void setOld_pIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OLD_P_ISSET_ID, value);
  }

  public double getOld_adjusted_p() {
    return this.old_adjusted_p;
  }

  public EnrichmentReusltItem setOld_adjusted_p(double old_adjusted_p) {
    this.old_adjusted_p = old_adjusted_p;
    setOld_adjusted_pIsSet(true);
    return this;
  }

  public void unsetOld_adjusted_p() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OLD_ADJUSTED_P_ISSET_ID);
  }

  /** Returns true if field old_adjusted_p is set (has been assigned a value) and false otherwise */
  public boolean isSetOld_adjusted_p() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OLD_ADJUSTED_P_ISSET_ID);
  }

  public void setOld_adjusted_pIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OLD_ADJUSTED_P_ISSET_ID, value);
  }

  public double getOdds_ratio() {
    return this.odds_ratio;
  }

  public EnrichmentReusltItem setOdds_ratio(double odds_ratio) {
    this.odds_ratio = odds_ratio;
    setOdds_ratioIsSet(true);
    return this;
  }

  public void unsetOdds_ratio() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ODDS_RATIO_ISSET_ID);
  }

  /** Returns true if field odds_ratio is set (has been assigned a value) and false otherwise */
  public boolean isSetOdds_ratio() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ODDS_RATIO_ISSET_ID);
  }

  public void setOdds_ratioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ODDS_RATIO_ISSET_ID, value);
  }

  public double getCombined_score() {
    return this.combined_score;
  }

  public EnrichmentReusltItem setCombined_score(double combined_score) {
    this.combined_score = combined_score;
    setCombined_scoreIsSet(true);
    return this;
  }

  public void unsetCombined_score() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMBINED_SCORE_ISSET_ID);
  }

  /** Returns true if field combined_score is set (has been assigned a value) and false otherwise */
  public boolean isSetCombined_score() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMBINED_SCORE_ISSET_ID);
  }

  public void setCombined_scoreIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMBINED_SCORE_ISSET_ID, value);
  }

  public int getGenesSize() {
    return (this.genes == null) ? 0 : this.genes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<String> getGenesIterator() {
    return (this.genes == null) ? null : this.genes.iterator();
  }

  public void addToGenes(String elem) {
    if (this.genes == null) {
      this.genes = new java.util.ArrayList<String>();
    }
    this.genes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<String> getGenes() {
    return this.genes;
  }

  public EnrichmentReusltItem setGenes(@org.apache.thrift.annotation.Nullable java.util.List<String> genes) {
    this.genes = genes;
    return this;
  }

  public void unsetGenes() {
    this.genes = null;
  }

  /** Returns true if field genes is set (has been assigned a value) and false otherwise */
  public boolean isSetGenes() {
    return this.genes != null;
  }

  public void setGenesIsSet(boolean value) {
    if (!value) {
      this.genes = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case GENE_SET:
      if (value == null) {
        unsetGene_set();
      } else {
        setGene_set((String)value);
      }
      break;

    case TERM:
      if (value == null) {
        unsetTerm();
      } else {
        setTerm((String)value);
      }
      break;

    case OVERLAP:
      if (value == null) {
        unsetOverlap();
      } else {
        setOverlap((String)value);
      }
      break;

    case P:
      if (value == null) {
        unsetP();
      } else {
        setP((Double)value);
      }
      break;

    case ADJUSTED_P:
      if (value == null) {
        unsetAdjusted_p();
      } else {
        setAdjusted_p((Double)value);
      }
      break;

    case OLD_P:
      if (value == null) {
        unsetOld_p();
      } else {
        setOld_p((Double)value);
      }
      break;

    case OLD_ADJUSTED_P:
      if (value == null) {
        unsetOld_adjusted_p();
      } else {
        setOld_adjusted_p((Double)value);
      }
      break;

    case ODDS_RATIO:
      if (value == null) {
        unsetOdds_ratio();
      } else {
        setOdds_ratio((Double)value);
      }
      break;

    case COMBINED_SCORE:
      if (value == null) {
        unsetCombined_score();
      } else {
        setCombined_score((Double)value);
      }
      break;

    case GENES:
      if (value == null) {
        unsetGenes();
      } else {
        setGenes((java.util.List<String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GENE_SET:
      return getGene_set();

    case TERM:
      return getTerm();

    case OVERLAP:
      return getOverlap();

    case P:
      return getP();

    case ADJUSTED_P:
      return getAdjusted_p();

    case OLD_P:
      return getOld_p();

    case OLD_ADJUSTED_P:
      return getOld_adjusted_p();

    case ODDS_RATIO:
      return getOdds_ratio();

    case COMBINED_SCORE:
      return getCombined_score();

    case GENES:
      return getGenes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GENE_SET:
      return isSetGene_set();
    case TERM:
      return isSetTerm();
    case OVERLAP:
      return isSetOverlap();
    case P:
      return isSetP();
    case ADJUSTED_P:
      return isSetAdjusted_p();
    case OLD_P:
      return isSetOld_p();
    case OLD_ADJUSTED_P:
      return isSetOld_adjusted_p();
    case ODDS_RATIO:
      return isSetOdds_ratio();
    case COMBINED_SCORE:
      return isSetCombined_score();
    case GENES:
      return isSetGenes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof EnrichmentReusltItem)
      return this.equals((EnrichmentReusltItem)that);
    return false;
  }

  public boolean equals(EnrichmentReusltItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_gene_set = true && this.isSetGene_set();
    boolean that_present_gene_set = true && that.isSetGene_set();
    if (this_present_gene_set || that_present_gene_set) {
      if (!(this_present_gene_set && that_present_gene_set))
        return false;
      if (!this.gene_set.equals(that.gene_set))
        return false;
    }

    boolean this_present_term = true && this.isSetTerm();
    boolean that_present_term = true && that.isSetTerm();
    if (this_present_term || that_present_term) {
      if (!(this_present_term && that_present_term))
        return false;
      if (!this.term.equals(that.term))
        return false;
    }

    boolean this_present_overlap = true && this.isSetOverlap();
    boolean that_present_overlap = true && that.isSetOverlap();
    if (this_present_overlap || that_present_overlap) {
      if (!(this_present_overlap && that_present_overlap))
        return false;
      if (!this.overlap.equals(that.overlap))
        return false;
    }

    boolean this_present_p = true;
    boolean that_present_p = true;
    if (this_present_p || that_present_p) {
      if (!(this_present_p && that_present_p))
        return false;
      if (this.p != that.p)
        return false;
    }

    boolean this_present_adjusted_p = true;
    boolean that_present_adjusted_p = true;
    if (this_present_adjusted_p || that_present_adjusted_p) {
      if (!(this_present_adjusted_p && that_present_adjusted_p))
        return false;
      if (this.adjusted_p != that.adjusted_p)
        return false;
    }

    boolean this_present_old_p = true;
    boolean that_present_old_p = true;
    if (this_present_old_p || that_present_old_p) {
      if (!(this_present_old_p && that_present_old_p))
        return false;
      if (this.old_p != that.old_p)
        return false;
    }

    boolean this_present_old_adjusted_p = true;
    boolean that_present_old_adjusted_p = true;
    if (this_present_old_adjusted_p || that_present_old_adjusted_p) {
      if (!(this_present_old_adjusted_p && that_present_old_adjusted_p))
        return false;
      if (this.old_adjusted_p != that.old_adjusted_p)
        return false;
    }

    boolean this_present_odds_ratio = true;
    boolean that_present_odds_ratio = true;
    if (this_present_odds_ratio || that_present_odds_ratio) {
      if (!(this_present_odds_ratio && that_present_odds_ratio))
        return false;
      if (this.odds_ratio != that.odds_ratio)
        return false;
    }

    boolean this_present_combined_score = true;
    boolean that_present_combined_score = true;
    if (this_present_combined_score || that_present_combined_score) {
      if (!(this_present_combined_score && that_present_combined_score))
        return false;
      if (this.combined_score != that.combined_score)
        return false;
    }

    boolean this_present_genes = true && this.isSetGenes();
    boolean that_present_genes = true && that.isSetGenes();
    if (this_present_genes || that_present_genes) {
      if (!(this_present_genes && that_present_genes))
        return false;
      if (!this.genes.equals(that.genes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetGene_set()) ? 131071 : 524287);
    if (isSetGene_set())
      hashCode = hashCode * 8191 + gene_set.hashCode();

    hashCode = hashCode * 8191 + ((isSetTerm()) ? 131071 : 524287);
    if (isSetTerm())
      hashCode = hashCode * 8191 + term.hashCode();

    hashCode = hashCode * 8191 + ((isSetOverlap()) ? 131071 : 524287);
    if (isSetOverlap())
      hashCode = hashCode * 8191 + overlap.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(p);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(adjusted_p);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(old_p);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(old_adjusted_p);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(odds_ratio);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(combined_score);

    hashCode = hashCode * 8191 + ((isSetGenes()) ? 131071 : 524287);
    if (isSetGenes())
      hashCode = hashCode * 8191 + genes.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(EnrichmentReusltItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetGene_set(), other.isSetGene_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGene_set()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gene_set, other.gene_set);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTerm(), other.isSetTerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.term, other.term);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetOverlap(), other.isSetOverlap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverlap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overlap, other.overlap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetP(), other.isSetP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetAdjusted_p(), other.isSetAdjusted_p());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdjusted_p()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adjusted_p, other.adjusted_p);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetOld_p(), other.isSetOld_p());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOld_p()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.old_p, other.old_p);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetOld_adjusted_p(), other.isSetOld_adjusted_p());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOld_adjusted_p()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.old_adjusted_p, other.old_adjusted_p);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetOdds_ratio(), other.isSetOdds_ratio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOdds_ratio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.odds_ratio, other.odds_ratio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetCombined_score(), other.isSetCombined_score());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombined_score()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combined_score, other.combined_score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetGenes(), other.isSetGenes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genes, other.genes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EnrichmentReusltItem(");
    boolean first = true;

    sb.append("gene_set:");
    if (this.gene_set == null) {
      sb.append("null");
    } else {
      sb.append(this.gene_set);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("term:");
    if (this.term == null) {
      sb.append("null");
    } else {
      sb.append(this.term);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overlap:");
    if (this.overlap == null) {
      sb.append("null");
    } else {
      sb.append(this.overlap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("p:");
    sb.append(this.p);
    first = false;
    if (!first) sb.append(", ");
    sb.append("adjusted_p:");
    sb.append(this.adjusted_p);
    first = false;
    if (!first) sb.append(", ");
    sb.append("old_p:");
    sb.append(this.old_p);
    first = false;
    if (!first) sb.append(", ");
    sb.append("old_adjusted_p:");
    sb.append(this.old_adjusted_p);
    first = false;
    if (!first) sb.append(", ");
    sb.append("odds_ratio:");
    sb.append(this.odds_ratio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("combined_score:");
    sb.append(this.combined_score);
    first = false;
    if (!first) sb.append(", ");
    sb.append("genes:");
    if (this.genes == null) {
      sb.append("null");
    } else {
      sb.append(this.genes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EnrichmentReusltItemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EnrichmentReusltItemStandardScheme getScheme() {
      return new EnrichmentReusltItemStandardScheme();
    }
  }

  private static class EnrichmentReusltItemStandardScheme extends org.apache.thrift.scheme.StandardScheme<EnrichmentReusltItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EnrichmentReusltItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GENE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gene_set = iprot.readString();
              struct.setGene_setIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TERM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.term = iprot.readString();
              struct.setTermIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OVERLAP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.overlap = iprot.readString();
              struct.setOverlapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // P
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.p = iprot.readDouble();
              struct.setPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ADJUSTED_P
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.adjusted_p = iprot.readDouble();
              struct.setAdjusted_pIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OLD_P
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.old_p = iprot.readDouble();
              struct.setOld_pIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OLD_ADJUSTED_P
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.old_adjusted_p = iprot.readDouble();
              struct.setOld_adjusted_pIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ODDS_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.odds_ratio = iprot.readDouble();
              struct.setOdds_ratioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // COMBINED_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.combined_score = iprot.readDouble();
              struct.setCombined_scoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GENES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                struct.genes = new java.util.ArrayList<String>(_list72.size);
                @org.apache.thrift.annotation.Nullable String _elem73;
                for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                {
                  _elem73 = iprot.readString();
                  struct.genes.add(_elem73);
                }
                iprot.readListEnd();
              }
              struct.setGenesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EnrichmentReusltItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.gene_set != null) {
        oprot.writeFieldBegin(GENE_SET_FIELD_DESC);
        oprot.writeString(struct.gene_set);
        oprot.writeFieldEnd();
      }
      if (struct.term != null) {
        oprot.writeFieldBegin(TERM_FIELD_DESC);
        oprot.writeString(struct.term);
        oprot.writeFieldEnd();
      }
      if (struct.overlap != null) {
        oprot.writeFieldBegin(OVERLAP_FIELD_DESC);
        oprot.writeString(struct.overlap);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(P_FIELD_DESC);
      oprot.writeDouble(struct.p);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ADJUSTED_P_FIELD_DESC);
      oprot.writeDouble(struct.adjusted_p);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_P_FIELD_DESC);
      oprot.writeDouble(struct.old_p);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_ADJUSTED_P_FIELD_DESC);
      oprot.writeDouble(struct.old_adjusted_p);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ODDS_RATIO_FIELD_DESC);
      oprot.writeDouble(struct.odds_ratio);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMBINED_SCORE_FIELD_DESC);
      oprot.writeDouble(struct.combined_score);
      oprot.writeFieldEnd();
      if (struct.genes != null) {
        oprot.writeFieldBegin(GENES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.genes.size()));
          for (String _iter75 : struct.genes)
          {
            oprot.writeString(_iter75);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EnrichmentReusltItemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EnrichmentReusltItemTupleScheme getScheme() {
      return new EnrichmentReusltItemTupleScheme();
    }
  }

  private static class EnrichmentReusltItemTupleScheme extends org.apache.thrift.scheme.TupleScheme<EnrichmentReusltItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EnrichmentReusltItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGene_set()) {
        optionals.set(0);
      }
      if (struct.isSetTerm()) {
        optionals.set(1);
      }
      if (struct.isSetOverlap()) {
        optionals.set(2);
      }
      if (struct.isSetP()) {
        optionals.set(3);
      }
      if (struct.isSetAdjusted_p()) {
        optionals.set(4);
      }
      if (struct.isSetOld_p()) {
        optionals.set(5);
      }
      if (struct.isSetOld_adjusted_p()) {
        optionals.set(6);
      }
      if (struct.isSetOdds_ratio()) {
        optionals.set(7);
      }
      if (struct.isSetCombined_score()) {
        optionals.set(8);
      }
      if (struct.isSetGenes()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetGene_set()) {
        oprot.writeString(struct.gene_set);
      }
      if (struct.isSetTerm()) {
        oprot.writeString(struct.term);
      }
      if (struct.isSetOverlap()) {
        oprot.writeString(struct.overlap);
      }
      if (struct.isSetP()) {
        oprot.writeDouble(struct.p);
      }
      if (struct.isSetAdjusted_p()) {
        oprot.writeDouble(struct.adjusted_p);
      }
      if (struct.isSetOld_p()) {
        oprot.writeDouble(struct.old_p);
      }
      if (struct.isSetOld_adjusted_p()) {
        oprot.writeDouble(struct.old_adjusted_p);
      }
      if (struct.isSetOdds_ratio()) {
        oprot.writeDouble(struct.odds_ratio);
      }
      if (struct.isSetCombined_score()) {
        oprot.writeDouble(struct.combined_score);
      }
      if (struct.isSetGenes()) {
        {
          oprot.writeI32(struct.genes.size());
          for (String _iter76 : struct.genes)
          {
            oprot.writeString(_iter76);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EnrichmentReusltItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.gene_set = iprot.readString();
        struct.setGene_setIsSet(true);
      }
      if (incoming.get(1)) {
        struct.term = iprot.readString();
        struct.setTermIsSet(true);
      }
      if (incoming.get(2)) {
        struct.overlap = iprot.readString();
        struct.setOverlapIsSet(true);
      }
      if (incoming.get(3)) {
        struct.p = iprot.readDouble();
        struct.setPIsSet(true);
      }
      if (incoming.get(4)) {
        struct.adjusted_p = iprot.readDouble();
        struct.setAdjusted_pIsSet(true);
      }
      if (incoming.get(5)) {
        struct.old_p = iprot.readDouble();
        struct.setOld_pIsSet(true);
      }
      if (incoming.get(6)) {
        struct.old_adjusted_p = iprot.readDouble();
        struct.setOld_adjusted_pIsSet(true);
      }
      if (incoming.get(7)) {
        struct.odds_ratio = iprot.readDouble();
        struct.setOdds_ratioIsSet(true);
      }
      if (incoming.get(8)) {
        struct.combined_score = iprot.readDouble();
        struct.setCombined_scoreIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list77 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.genes = new java.util.ArrayList<String>(_list77.size);
          @org.apache.thrift.annotation.Nullable String _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = iprot.readString();
            struct.genes.add(_elem78);
          }
        }
        struct.setGenesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

