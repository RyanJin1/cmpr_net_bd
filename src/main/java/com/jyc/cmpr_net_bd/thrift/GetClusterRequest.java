/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jyc.cmpr_net_bd.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-01-28")
public class GetClusterRequest implements org.apache.thrift.TBase<GetClusterRequest, GetClusterRequest._Fields>, java.io.Serializable, Cloneable, Comparable<GetClusterRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetClusterRequest");

  private static final org.apache.thrift.protocol.TField SETTING_FIELD_DESC = new org.apache.thrift.protocol.TField("setting", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TARGETS_FIELD_DESC = new org.apache.thrift.protocol.TField("targets", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetClusterRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetClusterRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable ClusterSetting setting; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<String> targets; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SETTING((short)1, "setting"),
    TARGETS((short)2, "targets");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SETTING
          return SETTING;
        case 2: // TARGETS
          return TARGETS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SETTING, new org.apache.thrift.meta_data.FieldMetaData("setting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "ClusterSetting")));
    tmpMap.put(_Fields.TARGETS, new org.apache.thrift.meta_data.FieldMetaData("targets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetClusterRequest.class, metaDataMap);
  }

  public GetClusterRequest() {
  }

  public GetClusterRequest(
    ClusterSetting setting,
    java.util.List<String> targets)
  {
    this();
    this.setting = setting;
    this.targets = targets;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetClusterRequest(GetClusterRequest other) {
    if (other.isSetSetting()) {
      this.setting = new ClusterSetting(other.setting);
    }
    if (other.isSetTargets()) {
      java.util.List<String> __this__targets = new java.util.ArrayList<String>(other.targets);
      this.targets = __this__targets;
    }
  }

  public GetClusterRequest deepCopy() {
    return new GetClusterRequest(this);
  }

  @Override
  public void clear() {
    this.setting = null;
    this.targets = null;
  }

  @org.apache.thrift.annotation.Nullable
  public ClusterSetting getSetting() {
    return this.setting;
  }

  public GetClusterRequest setSetting(@org.apache.thrift.annotation.Nullable ClusterSetting setting) {
    this.setting = setting;
    return this;
  }

  public void unsetSetting() {
    this.setting = null;
  }

  /** Returns true if field setting is set (has been assigned a value) and false otherwise */
  public boolean isSetSetting() {
    return this.setting != null;
  }

  public void setSettingIsSet(boolean value) {
    if (!value) {
      this.setting = null;
    }
  }

  public int getTargetsSize() {
    return (this.targets == null) ? 0 : this.targets.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<String> getTargetsIterator() {
    return (this.targets == null) ? null : this.targets.iterator();
  }

  public void addToTargets(String elem) {
    if (this.targets == null) {
      this.targets = new java.util.ArrayList<String>();
    }
    this.targets.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<String> getTargets() {
    return this.targets;
  }

  public GetClusterRequest setTargets(@org.apache.thrift.annotation.Nullable java.util.List<String> targets) {
    this.targets = targets;
    return this;
  }

  public void unsetTargets() {
    this.targets = null;
  }

  /** Returns true if field targets is set (has been assigned a value) and false otherwise */
  public boolean isSetTargets() {
    return this.targets != null;
  }

  public void setTargetsIsSet(boolean value) {
    if (!value) {
      this.targets = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case SETTING:
      if (value == null) {
        unsetSetting();
      } else {
        setSetting((ClusterSetting)value);
      }
      break;

    case TARGETS:
      if (value == null) {
        unsetTargets();
      } else {
        setTargets((java.util.List<String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SETTING:
      return getSetting();

    case TARGETS:
      return getTargets();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SETTING:
      return isSetSetting();
    case TARGETS:
      return isSetTargets();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof GetClusterRequest)
      return this.equals((GetClusterRequest)that);
    return false;
  }

  public boolean equals(GetClusterRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_setting = true && this.isSetSetting();
    boolean that_present_setting = true && that.isSetSetting();
    if (this_present_setting || that_present_setting) {
      if (!(this_present_setting && that_present_setting))
        return false;
      if (!this.setting.equals(that.setting))
        return false;
    }

    boolean this_present_targets = true && this.isSetTargets();
    boolean that_present_targets = true && that.isSetTargets();
    if (this_present_targets || that_present_targets) {
      if (!(this_present_targets && that_present_targets))
        return false;
      if (!this.targets.equals(that.targets))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSetting()) ? 131071 : 524287);
    if (isSetSetting())
      hashCode = hashCode * 8191 + setting.hashCode();

    hashCode = hashCode * 8191 + ((isSetTargets()) ? 131071 : 524287);
    if (isSetTargets())
      hashCode = hashCode * 8191 + targets.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(GetClusterRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetSetting(), other.isSetSetting());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetting()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setting, other.setting);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTargets(), other.isSetTargets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targets, other.targets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GetClusterRequest(");
    boolean first = true;

    sb.append("setting:");
    if (this.setting == null) {
      sb.append("null");
    } else {
      sb.append(this.setting);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("targets:");
    if (this.targets == null) {
      sb.append("null");
    } else {
      sb.append(this.targets);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetClusterRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetClusterRequestStandardScheme getScheme() {
      return new GetClusterRequestStandardScheme();
    }
  }

  private static class GetClusterRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetClusterRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetClusterRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SETTING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.setting = new ClusterSetting();
              struct.setting.read(iprot);
              struct.setSettingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TARGETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.targets = new java.util.ArrayList<String>(_list40.size);
                @org.apache.thrift.annotation.Nullable String _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = iprot.readString();
                  struct.targets.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setTargetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetClusterRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.setting != null) {
        oprot.writeFieldBegin(SETTING_FIELD_DESC);
        struct.setting.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.targets != null) {
        oprot.writeFieldBegin(TARGETS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.targets.size()));
          for (String _iter43 : struct.targets)
          {
            oprot.writeString(_iter43);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetClusterRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetClusterRequestTupleScheme getScheme() {
      return new GetClusterRequestTupleScheme();
    }
  }

  private static class GetClusterRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetClusterRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetClusterRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSetting()) {
        optionals.set(0);
      }
      if (struct.isSetTargets()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSetting()) {
        struct.setting.write(oprot);
      }
      if (struct.isSetTargets()) {
        {
          oprot.writeI32(struct.targets.size());
          for (String _iter44 : struct.targets)
          {
            oprot.writeString(_iter44);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetClusterRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.setting = new ClusterSetting();
        struct.setting.read(iprot);
        struct.setSettingIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list45 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.targets = new java.util.ArrayList<String>(_list45.size);
          @org.apache.thrift.annotation.Nullable String _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = iprot.readString();
            struct.targets.add(_elem46);
          }
        }
        struct.setTargetsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

